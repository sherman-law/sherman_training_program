!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
0	data_struct.vim	/^normal! 0$/;"	m
03l	data_struct.vim	/^normal! 03l$/;"	m
04l	data_struct.vim	/^normal! 04l$/;"	m
051l	data_struct.vim	/^normal! 051l$/;"	m
<Plug>NetrwBrowseX	data_struct.vim	/^nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)$/;"	m
DEBUG	common.h	4;"	d
INSERT_PATTERN_MEMCPY	double_list.h	5;"	d
INSERT_PATTERN_POINTER	double_list.h	6;"	d
LIST_FAIL	double_list.h	12;"	d
LIST_GOT_RESULT	double_list.h	11;"	d
LIST_NO_ERROR	double_list.h	10;"	d
LIST_NULL_ERROR	double_list.h	9;"	d
QUEUE_FAIL	queue/queue.h	10;"	d
QUEUE_GOT_RESULT	queue/queue.h	11;"	d
QUEUE_NO_ERROR	queue/queue.h	9;"	d
QUEUE_NULL_ERROR	queue/queue.h	8;"	d
R_BUF_FAIL	ring_buffer/ring_buffer.h	8;"	d
R_BUF_GOT_RESULT	ring_buffer/ring_buffer.h	7;"	d
R_BUF_NO_ERROR	ring_buffer/ring_buffer.h	6;"	d
R_BUF_NULL_ERROR	ring_buffer/ring_buffer.h	5;"	d
SAVE_FREE	common.h	12;"	d
STACK_FAIL	stack/stack.h	10;"	d
STACK_GOT_RESULT	stack/stack.h	11;"	d
STACK_NO_ERROR	stack/stack.h	9;"	d
STACK_NULL_ERROR	stack/stack.h	8;"	d
SessionLoad	data_struct.vim	/^let SessionLoad = 1$/;"	v
__COMMON_H	common.h	2;"	d
__DOUBLE_LIST_H	double_list.h	2;"	d
__QUEUE_H	queue/queue.h	2;"	d
__RING_BUFFER_H	ring_buffer/ring_buffer.h	2;"	d
__STACK_H	stack/stack.h	2;"	d
_dlink_list_t	double_list.h	/^typedef struct _dlink_list_t {$/;"	s
_list_node_t	double_list.h	/^typedef struct _list_node_t {$/;"	s
_queue_t	queue/queue.h	/^typedef struct _queue_t {$/;"	s
_rbuf_t	ring_buffer/ring_buffer.h	/^typedef struct _rbuf_t {$/;"	s
_stack_t	stack/stack.h	/^typedef struct _stack_t {$/;"	s
compare_func	queue/test_queue.c	/^int compare_func (void *ctx, list_node_t *node)$/;"	f
compare_func	stack/test_stack.c	/^int compare_func (void *ctx, list_node_t *node)$/;"	f
compare_func	test_list.c	/^int compare_func (void *ctx, list_node_t *node)$/;"	f
data	double_list.h	/^    void *data;$/;"	m	struct:_list_node_t
debug	common.h	7;"	d
debug	common.h	9;"	d
dl_list_append	double_list.c	/^list_status_t dl_list_append(dlink_list_t *thiz, void *data, int size, insert_pattern_t pattern)$/;"	f
dl_list_create	double_list.c	/^dlink_list_t *dl_list_create()$/;"	f
dl_list_delete	double_list.c	/^list_status_t dl_list_delete(dlink_list_t *thiz, fp_visit_func compare_func, void *ctx)$/;"	f
dl_list_delete_node	double_list.c	/^list_status_t dl_list_delete_node(dlink_list_t *thiz, list_node_t *node)$/;"	f
dl_list_destory	double_list.c	/^list_status_t dl_list_destory(dlink_list_t **thiz)$/;"	f
dl_list_for_each	double_list.c	/^list_status_t dl_list_for_each(dlink_list_t *thiz, list_node_t **node, fp_visit_func visit_func, void *ctx)$/;"	f
dl_list_prepend	double_list.c	/^list_status_t dl_list_prepend(dlink_list_t *thiz, void *data, int size, insert_pattern_t pattern)$/;"	f
dl_list_search	double_list.c	/^list_status_t dl_list_search(dlink_list_t *thiz, list_node_t **node, fp_visit_func compare_func, void *ctx)$/;"	f
dlink_list_t	double_list.h	/^} dlink_list_t;$/;"	t	typeref:struct:_dlink_list_t
find_max	test_list.c	/^int find_max (void *ctx, void *data)$/;"	f
fp_visit_func	double_list.h	/^typedef int (* fp_visit_func)(void *ctx, list_node_t *data);$/;"	t
gx	data_struct.vim	/^nmap gx <Plug>NetrwBrowseX$/;"	m
head	double_list.h	/^    list_node_t *head;$/;"	m	struct:_dlink_list_t
insert_pattern_t	double_list.h	/^typedef int insert_pattern_t;$/;"	t
length	double_list.h	/^    int length;$/;"	m	struct:_dlink_list_t
list	queue/queue.h	/^    dlink_list_t *list;$/;"	m	struct:_queue_t
list	ring_buffer/ring_buffer.h	/^    dlink_list_t *list;$/;"	m	struct:_rbuf_t
list	stack/stack.h	/^    dlink_list_t *list;$/;"	m	struct:_stack_t
list_node_t	double_list.h	/^} list_node_t;$/;"	t	typeref:struct:_list_node_t
list_status_t	double_list.h	/^typedef int list_status_t;$/;"	t
main	queue/test_queue.c	/^int main (void) $/;"	f
main	stack/test_stack.c	/^int main (void)$/;"	f
main	test_list.c	/^int main (void)$/;"	f
next	double_list.h	/^    struct _list_node_t *next;$/;"	m	struct:_list_node_t	typeref:struct:_list_node_t::_list_node_t
prev	double_list.h	/^    struct _list_node_t *prev;$/;"	m	struct:_list_node_t	typeref:struct:_list_node_t::_list_node_t
printf_info	queue/test_queue.c	/^int printf_info (void *ctx, list_node_t *node)$/;"	f
printf_info	stack/test_stack.c	/^int printf_info (void *ctx, list_node_t *node)$/;"	f
printf_info	test_list.c	/^int printf_info (void *ctx, list_node_t *node)$/;"	f
queue_create	queue/queue.c	/^queue_t *queue_create ()$/;"	f
queue_destory	queue/queue.c	/^queue_status_t queue_destory (queue_t **thiz)$/;"	f
queue_for_each	queue/queue.c	/^queue_status_t queue_for_each (queue_t *thiz, fp_visit_func visit_func, void *ctx) $/;"	f
queue_get_length	queue/queue.c	/^int queue_get_length (queue_t *thiz)$/;"	f
queue_head	queue/queue.c	/^queue_status_t queue_head (queue_t *thiz, void **data)$/;"	f
queue_pop	queue/queue.c	/^queue_status_t queue_pop (queue_t *thiz) $/;"	f
queue_push	queue/queue.c	/^queue_status_t queue_push (queue_t *thiz, void *data, int size, insert_pattern_t pattern)$/;"	f
queue_search	queue/queue.c	/^queue_status_t queue_search (queue_t *thiz, list_node_t **node, fp_visit_func compare_func, void *ctx)$/;"	f
queue_status_t	queue/queue.h	/^typedef int queue_status_t;$/;"	t
queue_t	queue/queue.h	/^} queue_t;$/;"	t	typeref:struct:_queue_t
rbuf_status_t	ring_buffer/ring_buffer.h	/^typedef int rbuf_status_t;$/;"	t
rbuf_t	ring_buffer/ring_buffer.h	/^} rbuf_t;$/;"	t	typeref:struct:_rbuf_t
read	ring_buffer/ring_buffer.h	/^    list_node_t *read;$/;"	m	struct:_rbuf_t
s:cpo_save	data_struct.vim	/^let s:cpo_save=&cpo$/;"	v
s:l	data_struct.vim	/^let s:l = 1 - ((0 * winheight(0) + 21) \/ 42)$/;"	v
s:l	data_struct.vim	/^let s:l = 21 - ((0 * winheight(0) + 20) \/ 41)$/;"	v
s:l	data_struct.vim	/^let s:l = 25 - ((24 * winheight(0) + 20) \/ 41)$/;"	v
s:l	data_struct.vim	/^let s:l = 42 - ((3 * winheight(0) + 20) \/ 41)$/;"	v
s:l	data_struct.vim	/^let s:l = 73 - ((38 * winheight(0) + 20) \/ 41)$/;"	v
s:l	data_struct.vim	/^let s:l = 8 - ((7 * winheight(0) + 21) \/ 42)$/;"	v
s:l	data_struct.vim	/^let s:l = 80 - ((30 * winheight(0) + 21) \/ 42)$/;"	v
s:so_save	data_struct.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:sx	data_struct.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:wipebuf	data_struct.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
stack_create	stack/stack.c	/^stack_t *stack_create()$/;"	f
stack_destory	stack/stack.c	/^stack_status_t stack_destory(stack_t **thiz)$/;"	f
stack_for_each	stack/stack.c	/^stack_status_t stack_for_each(stack_t *thiz, fp_visit_func visit_func, void *ctx)$/;"	f
stack_get_length	stack/stack.c	/^int stack_get_length(stack_t *thiz)$/;"	f
stack_pop	stack/stack.c	/^stack_status_t stack_pop(stack_t *thiz)$/;"	f
stack_push	stack/stack.c	/^stack_status_t stack_push(stack_t *thiz, void *data, int size, insert_pattern_t pattern)$/;"	f
stack_search	stack/stack.c	/^stack_status_t stack_search(stack_t *thiz, list_node_t **node, fp_visit_func compare_func, void *ctx)$/;"	f
stack_status_t	stack/stack.h	/^typedef int stack_status_t;$/;"	t
stack_t	stack/stack.h	/^} stack_t;$/;"	t	typeref:struct:_stack_t
stack_top	stack/stack.c	/^stack_status_t stack_top(stack_t *thiz, void **data)$/;"	f
tail	double_list.h	/^    list_node_t *tail;$/;"	m	struct:_dlink_list_t
write	ring_buffer/ring_buffer.h	/^    list_node_t *write;$/;"	m	struct:_rbuf_t
zt	data_struct.vim	/^normal! zt$/;"	m
